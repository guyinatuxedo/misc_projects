from lxml import html
import requests
import urllib, urllib2

#Set the target servside php script which we will be posting to
target = 'http://127.0.0.1/vote.php'

#We now scrape the information from that page, sort out the html table, and 
#store it into a list. We will need to do this after every time we correct a #category

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Now that we have scraped and parsed the necissary information from the table,
#we can start to evaluate it and then vote accordingl from the bottom up

#We will first evaluate Forever Alone.
FA = par.index("Penguin")
if FA != 0:
	#If this execustes, it means that FA is not on top. We will run a for
	#loop based upon how far behind it is
	print "Penguin is not on top, correcting"
	vote = {'elect': "Penguin"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) #URL encode the data we send
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Penguin" + str(x)	
else:
	print "Penguin is on top, proceeding"

print "First in polls. Turned out hacked."  

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Since the process is pretty repititve, I won't be placing as many processes.

#Next up is Dat Boi

FA = par.index("Dat Boi")
if FA != 0:
	print "Dat Boi is not first, correcting"
	vote = {'elect': "Dat Boi"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote)
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Dat Boi" + str(x)
else:
	print "Dat Boi is already in the correct position"

print "O shit watup?"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Success Kid

FA = par.index("Success Kid")
if FA != 0:
	#If this execustes, it means that FA is not on top. We will run a for
	#loop based upon how far behind it is
	print "Success Kid is not on top, correcting"
	vote = {'elect': "Success Kid"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) #URL encode the data we send
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Success Kid" + str(x)	
else:
	print "Success Kid is on top, proceeding"

print "Hacked the Polls, Got in First"  

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Ancient Alines take not, it's mispelled
FA = par.index("Ancient Alines")
if FA != 0:
	print "Ancient Alines is not on top, correcting"
	vote = {'elect': "Ancient Alines"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Ancient Alines" + str(x)	
else:
	print "Ancient Alines is on top, proceeding"

print "Polls"  

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Bad Luck Brian
FA = par.index("Bad Luck Brian")
if FA != 0:
	print "Bad Luck Brian is not on top, correcting"
	vote = {'elect': "Bad Luck Brian"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Bad Luck Brian" + str(x)	
else:
	print "Bad Luck Brian is on top, proceeding"

print "Setup online polls. Got hacked"  

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')


#Good Guy Greg
FA = par.index("Good Guy Greg")
if FA != 0:
	print "Good Guy Greg is not on top, correcting"
	vote = {'elect': "Good Guy Greg"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Good Guy Greg" + str(x)	
else:
	print "Good Guy Greg is on top, proceeding"

print "Sees option in poll doing bad, hacks it to improve it"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')


#Philosoraptor
FA = par.index("Philosoraptor")
if FA != 0:
	print "Philosoraptor is not on top, correcting"
	vote = {'elect': "Philosoraptor"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Philosoraptor" + str(x)	
else:
	print "Philosoraptor is on top, proceeding"

print "What if the poll is hacked?"
  
htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#wallpaper dump
FA = par.index("wallpaper dump")
if FA != 0:
	print "wallpaper dump is not on top, correcting"
	vote = {'elect': "wallpaper dump"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for wallpaper dump" + str(x)	
else:
	print "wallpaper dump is on top, proceeding"

print "dump of hacks"
  
htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')


#dump
FA = par.index("dump")
if FA != 0:
	print "wallpaper dump is not on top, correcting"
	vote = {'elect': "dump"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for dump" + str(x)	
else:
	print "dump is on top, proceeding"

print "hacked dump"
  
htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#dump
FA = par.index("dump")
if FA != 0:
	print "wallpaper dump is not on top, correcting"
	vote = {'elect': "dump"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for dump" + str(x)	
else:
	print "dump is on top, proceeding"

print "hacked dump"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Pepe
FA = par.index("Pepe")
if FA != 0:
	print "Pepe is not on top, correcting"
	vote = {'elect': "Pepe"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Pepe" + str(x)	
else:
	print "Pepe is on top, proceeding"

print "crying"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Dick Butt
FA = par.index("Dick Butt")
if FA != 0:
	print "Dick Butt is not on top, correcting"
	vote = {'elect': "Dick Butt"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Dick Butt" + str(x)	
else:
	print "Dick Butt is on top, proceeding"

print "imgur"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Bertstrips
FA = par.index("Bertstrips")
if FA != 0:
	print "Bertstrips is not on top, correcting"
	vote = {'elect': "Bertstrips"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Bertstrips" + str(x)	
else:
	print "Bertstrips is on top, proceeding"

print "insert racist, nazi, homophobic joke here"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#4chan
FA = par.index("4chan")
if FA != 0:
	print "4chan is not on top, correcting"
	vote = {'elect': "4chan"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for 4chan" + str(x)	
else:
	print "4chan is on top, proceeding"

print "insert entire internet here"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Tumblr
FA = par.index("Tumblr")
if FA != 0:
	print "Tumblr is not on top, correcting"
	vote = {'elect': "Tumblr"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Tumblr" + str(x)	
else:
	print "Tumblr is on top, proceeding"

print "insert everything that is offended on the internet here"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Rule 34
FA = par.index("Rule 34")
if FA != 0:
	print "Rule 34 is not on top, correcting"
	vote = {'elect': "Rule 34"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Rule 34" + str(x)	
else:
	print "Rule 34 is on top, proceeding"

print "insert everything here"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Confession Bear
FA = par.index("Confession Bear")
if FA != 0:
	print "Confession Bear is not on top, correcting"
	vote = {'elect': "Confession Bear"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Confession Bear" + str(x)	
else:
	print "Confession Bear is on top, proceeding"

print "I hacked the polls"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Doge
FA = par.index("Doge")
if FA != 0:
	print "Doge is not on top, correcting"
	vote = {'elect': "Doge"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Doge" + str(x)	
else:
	print "Doge is on top, proceeding"

print "Such Votes, much Hack5"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Simpsons
FA = par.index("Simpsons")
if FA != 0:
	print "Simpsons is not on top, correcting"
	vote = {'elect': "Simpsons"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Simpsons" + str(x)	
else:
	print "Simpsons is on top, proceeding"

print "Now Bart, it's ok if you hack the polls. Just don't get caught"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Harambe
FA = par.index("Harambe")
if FA != 0:
	print "Harambe is not on top, correcting"
	vote = {'elect': "Harambe"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Harambe" + str(x)	
else:
	print "Harambe is on top, proceeding"

print "Dicks Out"

htmlpage = requests.get('http://127.0.0.1/polls.html.php')
htmltree = html.fromstring(htmlpage.content)
par = htmltree.xpath('//td[@style="text-align:center;"]/text()')

#Forever Alone
FA = par.index("Forever Alone")
if FA != 0:
	print "Forever Alone is not on top, correcting"
	vote = {'elect': "Forever Alone"}
	diff = int(par[1]) - int(par[FA + 1]) + 50
	pdata = urllib.urlencode(vote) 
	for x in range(0, diff):
		post = urllib2.Request(target, pdata)
		feedback = urllib2.urlopen(post)
		print "Vote placed for Forever Alone" + str(x)	
else:
	print "Forever Alone is on top, proceeding"

print "How Ironic"


